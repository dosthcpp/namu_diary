def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.google.gms.google-services'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    packagingOptions {
        pickFirst 'lib/armeabi-v7a/libarcore_sdk_jni.so'
        pickFirst 'lib/armeabi-v7a/libarcore_sdk_c.so'
        pickFirst 'lib/armeabi-v7a/libUnityARCore.so'
        pickFirst 'lib/armeabi-v7a/libarpresto_api.so'
        pickFirst 'lib/arm64-v8a/libarcore_sdk_jni.so'
        pickFirst 'lib/arm64-v8a/libarcore_sdk_c.so'
        pickFirst 'lib/arm64-v8a/libUnityARCore.so'
        pickFirst 'lib/arm64-v8a/libarpresto_api.so'
        pickFirst 'lib/x86/libarcore_sdk_c.so'
        pickFirst 'lib/x86/libarcore_sdk_jni.so'
        pickFirst 'lib/x86/libUnityARCore.so'
        pickFirst 'lib/x86/libarpresto_api.so'
        pickFirst 'lib/x86_64/libarcore_sdk_c.so'
        pickFirst 'lib/x86_64/libarcore_sdk_jni.so'
        pickFirst 'lib/x86_64/libUnityARCore.so'
        pickFirst 'lib/x86_64/libarpresto_api.so'
        exclude 'META-INF/androidx.lifecycle_lifecycle-runtime.version'
        exclude 'META-INF/androidx.versionedparcelable_versionedparcelable.version'
        exclude 'META-INF/androidx.core_core.version'
    }

    compileSdkVersion 30

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
        checkReleaseBuilds false
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "co.dotslab.namu_diary"
        minSdkVersion 24
        targetSdkVersion 30
        multiDexEnabled true
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
        release {
            storeFile file('../keystore/key.jks')
            storePassword file('../keystore/keystore.password').text.trim()
            keyPassword file('../keystore/keystore.password').text.trim()
            keyAlias 'key'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            signingConfig signingConfigs.release
        }
        debug {
            signingConfig signingConfigs.debug
        }
        profile {
            signingConfig signingConfigs.debug
        }
        innterTest {
            matchingFallbacks = ['debug', 'release']
        }
    }
}

flutter {
    source '../..'
}



dependencies {
    implementation project(':unityLibrary')

    implementation platform('com.google.firebase:firebase-bom:26.7.0')
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
